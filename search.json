[{"path":"https://milanmlft.github.io/swapper/articles/swapper.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to swapper","text":"swapper package implements simple DE simulator based feature swapping.essence method involves randomly scrambling subset features one subgroup data. effectively induces DE signal scrambled genes, retaining characteristics original data set without rely modeling assumptions.","code":""},{"path":"https://milanmlft.github.io/swapper/articles/swapper.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Introduction to swapper","text":"","code":"library(swapper)"},{"path":"https://milanmlft.github.io/swapper/articles/swapper.html","id":"mock-up-a-data-set","dir":"Articles","previous_headings":"Quick start","what":"Mock up a data set","title":"Introduction to swapper","text":"First mock dataset. mock data set contains \"Treatment\" variable, just random partitioning cells 2 groups.","code":"sce <- scuttle::mockSCE(ncells = 100, ngenes = 50) sce #> class: SingleCellExperiment  #> dim: 50 100  #> metadata(0): #> assays(1): counts #> rownames(50): Gene_0001 Gene_0002 ... Gene_0049 Gene_0050 #> rowData names(0): #> colnames(100): Cell_001 Cell_002 ... Cell_099 Cell_100 #> colData names(3): Mutation_Status Cell_Cycle Treatment #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(1): Spikes table(sce$Treatment) #>  #> treat1 treat2  #>     55     45"},{"path":"https://milanmlft.github.io/swapper/articles/swapper.html","id":"simulate-de-by-swapping-features","dir":"Articles","previous_headings":"Quick start","what":"Simulate DE by swapping features","title":"Introduction to swapper","text":"Next use swapper simulate DE genes, using \"Treatment\" variable grouping factor. induce DE 10% original genes cells belonging \"treat1\" group.","code":"set.seed(123) # for reproducibility  cells_to_swap <- sce$Treatment == \"treat1\" sim <- simulateDE(sce, which_cols = cells_to_swap, prop_DE = 0.1) rowData(sim) #> DataFrame with 50 rows and 2 columns #>               is_DE swapped_feature #>           <logical>     <character> #> Gene_0001     FALSE              NA #> Gene_0002     FALSE              NA #> Gene_0003      TRUE       Gene_0031 #> Gene_0004     FALSE              NA #> Gene_0005     FALSE              NA #> ...             ...             ... #> Gene_0046     FALSE              NA #> Gene_0047     FALSE              NA #> Gene_0048     FALSE              NA #> Gene_0049     FALSE              NA #> Gene_0050     FALSE              NA table(rowData(sim)$is_DE) #>  #> FALSE  TRUE  #>    46     4"},{"path":"https://milanmlft.github.io/swapper/articles/swapper.html","id":"explore-the-simulated-data","dir":"Articles","previous_headings":"Quick start","what":"Explore the simulated data","title":"Introduction to swapper","text":"rowData can retrieve true DE genes. rowData also contains information regarding gene swapped . \"sim_group\" column colData indicates cells swapping occurred. example, equivalent \"Treatment\" grouping. can visualize compare original counts see swapping works. Comparing expression values simulated DE genes original data (left) simulated data (right). plot rowData shown , can see counts e.g. Gene_0003 treat1 group simulated data originated treat1 counts Gene_0014 original data. Likewise, simulated treat1 counts Gene_0014 original treat1 counts Gene_0042. effectively induced DE selectively swapping counts one, , treatment group.","code":"(trueDE_genes <- rownames(sim)[rowData(sim)$is_DE]) #> [1] \"Gene_0003\" \"Gene_0015\" \"Gene_0031\" \"Gene_0042\" rowData(sim)[trueDE_genes, ] #> DataFrame with 4 rows and 2 columns #>               is_DE swapped_feature #>           <logical>     <character> #> Gene_0003      TRUE       Gene_0031 #> Gene_0015      TRUE       Gene_0042 #> Gene_0031      TRUE       Gene_0015 #> Gene_0042      TRUE       Gene_0003 colData(sim) #> DataFrame with 100 rows and 4 columns #>          Mutation_Status  Cell_Cycle   Treatment sim_group #>              <character> <character> <character> <logical> #> Cell_001        negative           S      treat1      TRUE #> Cell_002        positive          G1      treat2     FALSE #> Cell_003        negative         G2M      treat2     FALSE #> Cell_004        positive          G0      treat2     FALSE #> Cell_005        positive          G1      treat2     FALSE #> ...                  ...         ...         ...       ... #> Cell_096        positive          G0      treat2     FALSE #> Cell_097        positive          G0      treat1      TRUE #> Cell_098        negative          G1      treat2     FALSE #> Cell_099        positive         G2M      treat2     FALSE #> Cell_100        negative           S      treat2     FALSE table(sim$Treatment, sim$sim_group) #>          #>          FALSE TRUE #>   treat1     0   55 #>   treat2    45    0 if (requireNamespace(\"scater\", quietly = TRUE)) {     library(scater)          ## Log-normalize counts for visualization     sce <- logNormCounts(sce)     sim <- logNormCounts(sim)          p_orig <- plotExpression(         sce, features = trueDE_genes, x = \"Treatment\", colour_by = \"Treatment\"     ) + ggtitle(\"Original counts\")          p_sim <- scater::plotExpression(         sim, features = trueDE_genes, x = \"Treatment\", colour_by = \"Treatment\"     ) + ggtitle(\"Simulated counts\")          gridExtra::grid.arrange(p_orig, p_sim, ncol = 2) } #> Loading required package: scuttle #> Loading required package: ggplot2"},{"path":"https://milanmlft.github.io/swapper/articles/swapper.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to swapper","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.1 (2022-06-23) #>  os       Ubuntu 20.04.5 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2022-10-11 #>  pandoc   2.14.2 @ /usr/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version  date (UTC) lib source #>  beachmat               2.12.0   2022-04-26 [1] Bioconductor #>  beeswarm               0.4.0    2021-06-01 [1] RSPM #>  Biobase              * 2.56.0   2022-04-26 [1] Bioconductor #>  BiocGenerics         * 0.42.0   2022-04-26 [1] Bioconductor #>  BiocManager            1.30.18  2022-05-18 [1] RSPM #>  BiocNeighbors          1.14.0   2022-04-26 [1] Bioconductor #>  BiocParallel           1.30.3   2022-06-05 [1] Bioconductor #>  BiocSingular           1.12.0   2022-04-26 [1] Bioconductor #>  BiocStyle            * 2.24.0   2022-04-26 [1] Bioconductor #>  bitops                 1.0-7    2021-04-24 [1] RSPM #>  bookdown               0.29     2022-09-12 [1] RSPM #>  bslib                  0.4.0    2022-07-16 [1] RSPM #>  cachem                 1.0.6    2021-08-19 [1] RSPM #>  cli                    3.4.1    2022-09-23 [1] RSPM #>  codetools              0.2-18   2020-11-04 [2] CRAN (R 4.2.1) #>  colorspace             2.0-3    2022-02-21 [1] RSPM #>  DelayedArray           0.22.0   2022-04-26 [1] Bioconductor #>  DelayedMatrixStats     1.18.1   2022-09-27 [1] Bioconductor #>  desc                   1.4.2    2022-09-08 [1] RSPM #>  digest                 0.6.29   2021-12-01 [1] RSPM #>  evaluate               0.16     2022-08-09 [1] RSPM #>  fansi                  1.0.3    2022-03-24 [1] RSPM #>  farver                 2.1.1    2022-07-06 [1] RSPM #>  fastmap                1.1.0    2021-01-25 [1] RSPM #>  fs                     1.5.2    2021-12-08 [1] RSPM #>  GenomeInfoDb         * 1.32.4   2022-09-06 [1] Bioconductor #>  GenomeInfoDbData       1.2.8    2022-10-11 [1] Bioconductor #>  GenomicRanges        * 1.48.0   2022-04-26 [1] Bioconductor #>  ggbeeswarm             0.6.0    2017-08-07 [1] RSPM #>  ggplot2              * 3.3.6    2022-05-03 [1] RSPM #>  ggrepel                0.9.1    2021-01-15 [1] RSPM #>  glue                   1.6.2    2022-02-24 [1] RSPM #>  gridExtra              2.3      2017-09-09 [1] RSPM #>  gtable                 0.3.1    2022-09-01 [1] RSPM #>  highr                  0.9      2021-04-16 [1] RSPM #>  htmltools              0.5.3    2022-07-18 [1] RSPM #>  IRanges              * 2.30.1   2022-08-18 [1] Bioconductor #>  irlba                  2.3.5.1  2022-10-03 [1] RSPM #>  jquerylib              0.1.4    2021-04-26 [1] RSPM #>  jsonlite               1.8.2    2022-10-02 [1] RSPM #>  knitr                  1.40     2022-08-24 [1] RSPM #>  labeling               0.4.2    2020-10-20 [1] RSPM #>  lattice                0.20-45  2021-09-22 [2] CRAN (R 4.2.1) #>  lifecycle              1.0.2    2022-09-09 [1] RSPM #>  magrittr               2.0.3    2022-03-30 [1] RSPM #>  Matrix                 1.5-1    2022-09-13 [1] RSPM #>  MatrixGenerics       * 1.8.1    2022-06-26 [1] Bioconductor #>  matrixStats          * 0.62.0   2022-04-19 [1] RSPM #>  memoise                2.0.1    2021-11-26 [1] RSPM #>  munsell                0.5.0    2018-06-12 [1] RSPM #>  pillar                 1.8.1    2022-08-19 [1] RSPM #>  pkgconfig              2.0.3    2019-09-22 [1] RSPM #>  pkgdown                2.0.6    2022-07-16 [1] any (@2.0.6) #>  purrr                  0.3.5    2022-10-06 [1] RSPM #>  R6                     2.5.1    2021-08-19 [1] RSPM #>  ragg                   1.2.3    2022-09-29 [1] RSPM #>  Rcpp                   1.0.9    2022-07-08 [1] RSPM #>  RCurl                  1.98-1.9 2022-10-03 [1] RSPM #>  rlang                  1.0.6    2022-09-24 [1] RSPM #>  rmarkdown              2.17     2022-10-07 [1] CRAN (R 4.2.1) #>  rprojroot              2.0.3    2022-04-02 [1] RSPM #>  rsvd                   1.0.5    2021-04-16 [1] RSPM #>  S4Vectors            * 0.34.0   2022-04-26 [1] Bioconductor #>  sass                   0.4.2    2022-07-16 [1] RSPM #>  ScaledMatrix           1.4.1    2022-09-11 [1] Bioconductor #>  scales                 1.2.1    2022-08-20 [1] RSPM #>  scater               * 1.24.0   2022-04-26 [1] Bioconductor #>  scuttle              * 1.6.3    2022-08-23 [1] Bioconductor #>  sessioninfo            1.2.2    2021-12-06 [1] any (@1.2.2) #>  SingleCellExperiment * 1.18.1   2022-10-02 [1] Bioconductor #>  sparseMatrixStats      1.8.0    2022-04-26 [1] Bioconductor #>  stringi                1.7.8    2022-07-11 [1] RSPM #>  stringr                1.4.1    2022-08-20 [1] RSPM #>  SummarizedExperiment * 1.26.1   2022-04-29 [1] Bioconductor #>  swapper              * 0.99.2   2022-10-11 [1] local #>  systemfonts            1.0.4    2022-02-11 [1] RSPM #>  textshaping            0.3.6    2021-10-13 [1] RSPM #>  tibble                 3.1.8    2022-07-22 [1] RSPM #>  utf8                   1.2.2    2021-07-24 [1] RSPM #>  vctrs                  0.4.2    2022-09-29 [1] RSPM #>  vipor                  0.4.5    2017-03-22 [1] RSPM #>  viridis                0.6.2    2021-10-13 [1] RSPM #>  viridisLite            0.4.1    2022-08-22 [1] RSPM #>  withr                  2.5.0    2022-03-03 [1] RSPM #>  xfun                   0.33     2022-09-12 [1] RSPM #>  XVector                0.36.0   2022-04-26 [1] Bioconductor #>  yaml                   2.3.5    2022-02-21 [1] RSPM #>  zlibbioc               1.42.0   2022-04-26 [1] Bioconductor #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.2.1/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"https://milanmlft.github.io/swapper/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Milan Malfait. Author, maintainer.","code":""},{"path":"https://milanmlft.github.io/swapper/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Malfait M (2022). swapper: Simulate DE Signal Feature Swapping. https://github.com/milanmlft/swapper, https://milanmlft.github.io/swapper/.","code":"@Manual{,   title = {swapper: Simulate DE Signal By Feature Swapping},   author = {Milan Malfait},   year = {2022},   note = {https://github.com/milanmlft/swapper, https://milanmlft.github.io/swapper/}, }"},{"path":[]},{"path":"https://milanmlft.github.io/swapper/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate DE Signal By Feature Swapping","text":"can install development version swapper GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"milanmlft/swapper\")"},{"path":"https://milanmlft.github.io/swapper/reference/simulateDE.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate DE by swapping features — simulateDE","title":"Simulate DE by swapping features — simulateDE","text":"simple DE simulator takes dataset grouping factor induces DE swapping features one groups . ensure keeping data structure original data without estimate distribution parameters.","code":""},{"path":"https://milanmlft.github.io/swapper/reference/simulateDE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate DE by swapping features — simulateDE","text":"","code":"simulateDE(x, which_cols, ...)  # S4 method for ANY simulateDE(x, which_cols, prop_DE = 0.01)  # S4 method for SummarizedExperiment simulateDE(x, which_cols, ..., use_assay = \"counts\")  # S4 method for SingleCellExperiment simulateDE(x, which_cols, ...)"},{"path":"https://milanmlft.github.io/swapper/reference/simulateDE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate DE by swapping features — simulateDE","text":"x numeric matrix containing features rows cells columns. Alternatively, SummarizedExperiment SingleCellExperiment object. which_cols Character, numeric logical vector specifying columns (cells, samples, ...) x feature swapping occur. Usually, random subset columns belonging mock group. ... generic, arguments passed specific methods. SummarizedExperiment method, arguments passed method. SingleCellExperiment method, arguments passed SummarizedExperiment method. prop_DE Numeric scalar specifying proportion features simulated DE. Default: 0.01. use_assay string integer scalar specifying assay x used input simulation. default use \"counts\".","code":""},{"path":"https://milanmlft.github.io/swapper/reference/simulateDE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate DE by swapping features — simulateDE","text":"SummarizedExperiment object DE induced specified groups. simulated counts \"counts\" assay returned object. \"sim_group\" column colData indicates whether swapping performed column (specified which_cols argument). rowData contains following columns: \"is_DE\": logical vector indicating ground truth status feature \"swapped_feature\": character vector indicating original feature feature swapped x SummarizedExperiment object, original colData rowData combined new columns. x SingleCellExperiment object, output also SingleCellExperiment.","code":""},{"path":"https://milanmlft.github.io/swapper/reference/simulateDE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate DE by swapping features — simulateDE","text":"Note SummarizedExperiment objects, additional assays (containing example normalized values) retained. simple library size-factor normalization, size factors cell identical simulation. However, sophisticated methods, normalization deconvolution, size factors might differ due feature swapping. expected number DE features equal prop_DE * nrow(x). Note however possible actual number might 1 lower . can happen single feature remains un-\"swapped\" without features left swap .","code":""},{"path":"https://milanmlft.github.io/swapper/reference/simulateDE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate DE by swapping features — simulateDE","text":"Milan Malfait","code":""},{"path":"https://milanmlft.github.io/swapper/reference/simulateDE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate DE by swapping features — simulateDE","text":"","code":"example_sce <- scuttle::mockSCE()  ## Swap features in the \"treat1\" group cells_to_swap <- example_sce$Treatment == \"treat1\"  sim <- simulateDE(example_sce, which_cols = cells_to_swap, prop_DE = 0.1) sim #> class: SingleCellExperiment  #> dim: 2000 200  #> metadata(0): #> assays(1): counts #> rownames(2000): Gene_0001 Gene_0002 ... Gene_1999 Gene_2000 #> rowData names(2): is_DE swapped_feature #> colnames(200): Cell_001 Cell_002 ... Cell_199 Cell_200 #> colData names(4): Mutation_Status Cell_Cycle Treatment sim_group #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"https://milanmlft.github.io/swapper/reference/swapper-package.html","id":null,"dir":"Reference","previous_headings":"","what":"swapper: Simulate DE Signal By Feature Swapping — swapper-package","title":"swapper: Simulate DE Signal By Feature Swapping — swapper-package","text":"Provides simple simulation method high-throughput data. core method consists randomly scrambling features within one experimental group. approach retains reference data characteristics without requiring extensive model fitting.","code":""},{"path":[]},{"path":"https://milanmlft.github.io/swapper/reference/swapper-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"swapper: Simulate DE Signal By Feature Swapping — swapper-package","text":"Maintainer: Milan Malfait milan.malfait94@gmail.com (ORCID)","code":""}]
